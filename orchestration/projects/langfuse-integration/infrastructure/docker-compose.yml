version: '3.8'

services:
  # PostgreSQL Database for Langfuse
  postgres:
    image: postgres:15-alpine
    container_name: langfuse-postgres
    environment:
      POSTGRES_DB: langfuse
      POSTGRES_USER: langfuse
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-langfuse_secure_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U langfuse"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: langfuse-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MinIO for S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: langfuse-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio_admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio_secure_password}
      MINIO_DEFAULT_BUCKETS: langfuse-uploads
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # Langfuse Application (to be added after forking)
  # langfuse:
  #   build: 
  #     context: ../../../sambatv-ai-platform
  #     dockerfile: Dockerfile
  #   container_name: sambatv-ai-platform
  #   environment:
  #     DATABASE_URL: postgresql://langfuse:${POSTGRES_PASSWORD:-langfuse_secure_password}@postgres:5432/langfuse
  #     REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
  #     S3_ENDPOINT: http://minio:9000
  #     S3_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-minio_admin}
  #     S3_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-minio_secure_password}
  #     S3_BUCKET_NAME: langfuse-uploads
  #     NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
  #     NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
  #     GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
  #     GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
  #     ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
  #     GOOGLE_GEMINI_API_KEY: ${GOOGLE_GEMINI_API_KEY}
  #     OPENROUTER_API_KEY: ${OPENROUTER_API_KEY}
  #   ports:
  #     - "3001:3000"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #   restart: unless-stopped

  # pgAdmin for database management (optional, for development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: langfuse-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@sambatv.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-pgadmin_secure_password}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres-data:
    name: langfuse-postgres-data
  redis-data:
    name: langfuse-redis-data
  minio-data:
    name: langfuse-minio-data
  pgadmin-data:
    name: langfuse-pgadmin-data

networks:
  default:
    name: langfuse-network